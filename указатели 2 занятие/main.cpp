#include <iostream>

//Task1

int main() {
	setlocale(LC_ALL, "Russian");
	int n, m;

	//Нейтральные указатели
	
	// int* pn1 = 0; //способ 1 (неактуальный так как из языка С  и обладает одной проблемой) 
	// создали указатель на переменную n; = 0 - нейтральный указатель; = &n - приравняли и инициализировали указатель
	
	// int* pn2 = NULL; //инициализация нейтрального адреса NULL (так обозначаются нейтральные указатели, но способ все равно уже не актуален)
	
	int* pn3 = nullptr; // единственно верный способ для инициализации нейтрального указателя                                                                              
	
	
	if (pn3 != nullptr)
		std::cout << "pn3 = " << pn3 << std::endl;
	else
		std::cout << "Ошибка! Указатель не инициализрован!\n";

		//разыменование нейтральной области всегда приводит  ошибке
		

	//Типы констант указателей. 
	// Может быть перенаправлен без инициализации и может быть перенаправлен
	// на другую область памяти, но с его помозью нельзя менять значение памяти, на которую он направлен
	n = 7; m = 15;
	
	const int* pointer1; // Указатель на константу
	
	pointer1 = &n; // = адресу(&) n
	pointer1 = &m; 
	// *pointer1 = 10; // Ошибка
	std::cout << *pointer1 << std::endl;
	

	int* const pointer2 = &n; // константный указатель или указатель-константа
	
	// не может быть объявлен без инициализации и не может быть перенаправлен на другую область памяти, но с его
	// помощью можно менять значение памяти на которую он направлен.
	// pointer2 = &m; // Ошибка
	*pointer2 = 10; //разыменование
	std::cout << n << std::endl;
	

	const int* const pointer3 = &n; // Константный указатель на константу
	
	// Не может быть объявлен без инициализации и не может быть перенаправлен на другую область памяти.
	// с его помощью нельзя менять значение памяти на которую он направлен.
	// pointer3 = &m; // Ошибка
	// *pointer3 = 42; // Ошибка
	std::cout << *pointer3 << std::endl; // можно получить разыменование 
	

	

	return 0;
}